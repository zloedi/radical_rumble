









   RADICAL MULTIPLAYER       prostranstvoto_guest : prostranstvoto789









    Who am I














    Why the Radical
        * De-indoctrinate, alternative approach to code games.
        * Meet other programmers and talk about real programming. (group therapy?)
        * Learn new stuff.
        * To create ?useful? software.
        * To promote prostranstvoto.bg (there is a donation pot, please donate)
        * Drink alcohol.
        * Source code
            https://github.com/zloedi/radical_rumble
            https://github.com/zloedi/ZloediUtils
            The missing 'Content'
    
    
    
    
    





    Revisit SDL/Unity, Structs of Arrays, clocks and more
        * Compile as Unity assembly, SDL exe and headless standalone server.
        * SOA of primitive types exclusively on game state (class Game):
            Pawn, Board, Player
        * Filters
        * Same mechanism to serialize deltas everywhere (network, map editor, /savegames/)
        * Use future timestamps to sync lerps, don't send packets inbetween. Server clock always
            piggybacked.
        * Single tick/monobehaviour (the local server runs in the same tick too)
        * Use unreliable UDP stack ('inspired by' Quake3)
            Each tick potentially generates delta.
            64 deltas per client in a circular buffer.
            Resend deltas from last ack to current.
            Currently deltas are string, too lazy to make them compressed bytes.
        * Extensive Qonsole/Cellophane usage (thank you C# reflection):
            Use the Cellophane for client commands, server can push 'tail' commands in packets.
            Map keys to Cellophane commands, store in the Cellophane cfg.
            Cellophane on the standalone.
    
    
    




    







    What we improved since Event 3












    Words on coming from the 'QGL' client














    Doing (multiplayer) game visuals:

        == Create ==

            * register in some 'manager' collection.
            * setup transform
            * setup materials
            * find and instantiate / manipulate specific children
            * create and attach some stuff in another hierarchy (another collection?)
            * ...

        == Tick ==

            * move stuff
            * use your favorite concurent mechanisms
            * notify dependencies

        == Handle events ==

            * server game state change
            * animation switch
            * feedback on visual interaction i.e. 'visually got hit' -- material prop change,
                particle emission, UI change ...
            * killed / garbage (on the server)
            * notify dependencies
            * ...

        == Cleanup ==

            * destroy game objects, unregister from managers
            * material and texture instances
            * do the same for any attached game objects not in hierrchy
            * notify dependencies
            * ...












    Hard while Retained:
        * don't leak
        * dependencies and order of execution
        * arbitrary change of the 'abstract' (server) game state
        * server enforced clocks.












    'Immediate' visuals
        Just Tick: Each frame 'redraw' the game state supplied by the server using the server clock.















    IMGO
        Demo Event4()














        Controls visibility and hierarchy order by invoke/no-invoke, order of invoke
        Gives reference to game object.
        Gives references to designated children.
        Destroying all the IMGOs is ok.













    Dependencies and execution order become explicit, literally coded in the game tick.
    No leaks, single point of management.













    Still convenient to have some event-like mechanism:
        * Triggers
            Flags that live for entire frame, can be handled at multiple places in the tick.
        * SingleShot
            Capture state, pass lambda, tick at the end of the frame.
                conditional()/tick(), timeout, delay, done()
            Projectiles implemented as both SingleShot and IMGO












    Programming animations, the IM way

    What we need:
         * sample the animations every tick, for models passed down from IMGOs
         * custom clock to sample.
         * crossfade to any state at any time with custom transition times.
         * arbitrary scale for animation times (and animation transitions)
              attack loop may be shorter than the animation clip
              time to attack may vary each loop.
         * changing the attack/move steps on the server shouldn't require animation mod/reimport.
         * polling, not interested in events.












    What we actually want -- control of animations down to the individual frame.












    Problems with Animator Controller state machines -- explicit stuff go here...












    Alt solutions -- animancer, other?













    Animo
        Put all clips in two Animator layers.
        At runtime, update animation times each tick and use two alternating 'channels'
            in a circular buffer for crossfades.
        'One Shot' animations can be polled for end of animation and crossfade back to loop.
            in our case either 'move' or 'idle', not much idling there though
        Sample animations each tick by using Animator.SetLayerWeight() and Animator.Play()
        Some performance loss.
        Doesn't provide much utility, everything is left to the user.









    Used it in Raypunk, proved the right thing.











