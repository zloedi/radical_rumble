









   RADICAL MULTIPLAYER       prostranstvoto_guest : prostranstvoto789









    Who am I














    Why the Radical (launch four clients)
        * De-indoctrinate, alternative approach to code games.
        * Meet other programmers and talk about real programming. (group therapy?)
        * Learn new stuff.
        * To create ?useful? software.
        * To promote prostranstvoto.bg (there is a donation pot, please donate)
        * Drink alcohol.
        * Source code
            https://github.com/zloedi/radical_rumble
            https://github.com/zloedi/ZloediUtils
    
    
    
    
    





    Revisit SDL/Unity, Structs of Arrays, clocks and more
        * Compile as Unity assembly, SDL exe and headless standalone server.
        * SOA of primitive types exclusively on game state (class Game):
            Pawn, Board, Player
        * Filters
        * Same mechanism to serialize deltas everywhere (network, map editor, /savegames/)
        * Use future timestamps to sync lerps, don't send packets inbetween. Server clock always
            piggybacked.
        * Single tick/monobehaviour (the local server runs in the same tick too)
        * Use unreliable UDP stack ('inspired by' Quake3)
            Each tick potentially generates delta.
            64 deltas per client in a circular buffer.
            Resend deltas from last ack to current.
            Currently deltas are string, too lazy to make them compressed bytes.
        * Extensive Qonsole/Cellophane usage (thank you C# reflection):
            Use the Cellophane for client commands, server can push 'tail' commands in packets.
            Map keys to Cellophane commands, store in the Cellophane cfg.
            Cellophane on the standalone.
    
    
    




    









    The Gym -- adding fields and functionality to the server
        * Split the avoidance work-in-progress from the currently working server tick.
        * Not a fan of branches -- chickenbits instead (cvars).
        * The game is extended only on the local server so we can draw debug stuff.
        * Adding new fields to the pawn by simply adding arrays to Gym /may be synced too/.
        * Adding new filters to pawn.














    The layered target position -- focus and lerp-end points
        * Introduce 'focus point', another layer above move-end
        * Decide state on reaching focus instead of move-end













    Separate pawns:
        * Setup feelers on pawns:
            pos + steer v * radius * speed (maybe dt here somewhere?)
                where steer v = ( lerp segment + to focus ) normalized
                will stick to current direction when going around inert teammates,
                    but try to get to focus;
                    can add weights to either vector to change behaviour.
        * Gather clipping feelers (in filters once per tick) -- avdPairClip (per team).
        * Separate clipping feelers (in tick) -- avdPairClip.
            use 'separation' constraint, can add different masses there.
        * Lerp z position NOW (otherwise will get balanced out, everyone stops).
        * Set feelers as endpoints of clipping z-s.












    Problem -- around inert teammates the constraint can squash feeler towards pawn origin;
        either stuck or wandering.










    Avoid inert pawns -- avdCrntDist
        * Use distance constraint between position and feeler.
        * Put it in the same 'substep' loop.























